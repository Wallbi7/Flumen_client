extends Node2D

## GESTIONNAIRE PRINCIPAL DE LA SC√àNE DE JEU
## ===========================================
## Ce script g√®re l'interface utilisateur, la cam√©ra et la coordination avec le GameManager.
## Il ne g√®re PAS directement le joueur ou les maps - c'est le r√¥le du GameManager.

## R√âF√âRENCES AUX N≈íUDS DE LA SC√àNE
## =================================
@onready var websocket_manager = $WebSocketManager  # Gestionnaire de connexion WebSocket
@onready var camera = $Camera2D                     # Cam√©ra principale du jeu
@onready var hud = $UILayer/HUD                     # Interface utilisateur HUD style Dofus

## VARIABLES D'√âTAT
## =================
var fallback_executed: bool = false  # Emp√™che l'ex√©cution multiple du fallback

## INITIALISATION DE LA SC√àNE PRINCIPALE
## ======================================
func _ready():
	print("[Main] === INITIALISATION SC√àNE PRINCIPALE ===")
	
	# AJOUT DU SCRIPT DE DEBUG COMBAT
	# ================================
	var debug_combat = preload("res://debug_combat_click.gd").new()
	debug_combat.name = "CombatClickDebug"
	add_child(debug_combat)
	print("[Main] ‚úÖ Script de debug combat ajout√©")
	
	# CONFIGURATION DU REDIMENSIONNEMENT
	# ===================================
	# Connecter le signal de redimensionnement de fen√™tre pour ajuster la cam√©ra
	get_viewport().size_changed.connect(_on_viewport_size_changed)
	
	# V√âRIFICATION DE L'AUTHENTIFICATION
	# ===================================
	# Si le joueur n'est pas authentifi√©, retourner √† l'√©cran de connexion
	if not AuthManager.is_authenticated():
		print("[Main] ‚ùå Joueur non authentifi√©, redirection vers login")
		get_tree().change_scene_to_file("res://game/LoginScene.tscn")
		return
	
	print("[Main] ‚úÖ Joueur authentifi√©: ", AuthManager.get_username())
	
	# CONFIGURATION DES SIGNAUX WEBSOCKET
	# ====================================
	# Connecter les signaux pour r√©agir aux √©v√©nements de connexion
	websocket_manager.connected.connect(_on_websocket_connected)
	websocket_manager.disconnected.connect(_on_websocket_disconnected)
	websocket_manager.connection_error.connect(_on_websocket_error)
	
	# LIAISON AVEC LE GAMEMANAGER
	# ============================
	# Informer le GameManager du WebSocket manager pour compatibilit√©
	GameManager.ws_manager = websocket_manager
	
	# LANCEMENT DE LA CONNEXION
	# ==========================
	print("[Main] Lancement de la connexion au serveur de jeu avec retry automatique...")
	GameManager.connect_to_game_server()
	
	# FALLBACK DE S√âCURIT√â AJUST√â
	# ============================
	# Augmenter le d√©lai pour permettre aux tentatives de retry de fonctionner
	# Le fallback hors ligne se d√©clenche maintenant apr√®s 15 secondes
	print("[Main] Fallback hors ligne programm√© dans 15 secondes si aucune connexion r√©ussie")
	get_tree().create_timer(15.0).timeout.connect(_fallback_load_map)



## CALLBACK: CONNEXION WEBSOCKET R√âUSSIE
## ======================================
func _on_websocket_connected():
	"""
	Appel√© quand la connexion WebSocket est √©tablie avec succ√®s.
	Lance le chargement de la map et la cr√©ation de l'interface.
	"""
	print("[Main] === CONNEXION WEBSOCKET R√âUSSIE ===")
	
	# Arr√™ter le m√©canisme de retry maintenant que la connexion est √©tablie
	if websocket_manager and websocket_manager.has_method("stop_retry"):
		websocket_manager.stop_retry()
	
	# Afficher un message de succ√®s √† l'utilisateur
	print("[Main] ‚úÖ Connect√© au serveur de jeu avec succ√®s!")
	
	# Lancer le chargement initial de la map
	_load_initial_map()

func _load_initial_map():
	"""
	Charge la map initiale bas√©e sur les donn√©es JWT du joueur
	"""
	# LECTURE DES DONN√âES JWT
	# =======================
	# R√©cup√©rer les informations du joueur depuis le token JWT
	var payload = AuthManager.get_jwt_payload()
	var map_id = payload.get("map_id", "map_0_0")
	var pos_x = payload.get("pos_x", 758.0)  # Position par d√©faut au centre
	var pos_y = payload.get("pos_y", 605.0)
	
	print("[Main] Donn√©es JWT - Map: ", map_id, " Position: (", pos_x, ", ", pos_y, ")")
	
	# CONFIGURATION DE LA CAM√âRA
	# ===========================
	# Configurer la cam√©ra adaptative avant de charger la map
	_setup_adaptive_camera()
	
	# CHARGEMENT DE LA MAP VIA GAMEMANAGER
	# =====================================
	# Le GameManager s'occupe de charger la map et cr√©er le joueur
	print("[Main] Chargement de la map via GameManager...")
	GameManager.load_map(map_id, pos_x, pos_y)
	
	# INITIALISATION DU HUD
	# ======================
	print("[Main] Initialisation du HUD...")
	if hud:
		hud.visible = true
		print("[Main] HUD activ√© avec succ√®s - Position: ", hud.position, " Taille: ", hud.size)
	else:
		print("[Main] ‚ùå HUD non trouv√© !")
	
	print("[Main] Initialisation termin√©e avec succ√®s!")

## CALLBACK: D√âCONNEXION WEBSOCKET
## ================================
func _on_websocket_disconnected():
	"""
	Appel√© quand la connexion WebSocket est perdue.
	Met √† jour l'interface pour indiquer le mode hors ligne.
	"""
	print("[Main] === CONNEXION WEBSOCKET PERDUE ===")
	# Le HUD g√®re lui-m√™me l'affichage des √©tats de connexion

## CALLBACK: ERREUR DE CONNEXION WEBSOCKET
## =========================================
func _on_websocket_error(error_message):
	"""
	Appel√© quand une erreur de connexion WebSocket se produit.
	Affiche l'erreur mais permet au m√©canisme de retry de continuer.
	"""
	print("[Main] === ERREUR DE CONNEXION ===")
	print("[Main] ‚ùå Erreur WebSocket: ", error_message)
	
	# Afficher un message d'information √† l'utilisateur
	# Le retry automatique continue en arri√®re-plan
	if websocket_manager and websocket_manager._retry_enabled:
		print("[Main] üîÑ Tentative de reconnexion automatique en cours...")
		print("[Main] Le client essaiera de se connecter quand le serveur sera disponible")

## FALLBACK: CHARGEMENT HORS LIGNE
## ================================
func _fallback_load_map():
	"""
	Fallback de s√©curit√© : charge la map en mode hors ligne si la connexion WebSocket √©choue.
	Ne s'ex√©cute que si aucune map n'est encore charg√©e ET si le fallback n'a pas d√©j√† √©t√© ex√©cut√©.
	"""
	print("[Main] === V√âRIFICATION FALLBACK ===")
	
	# V√âRIFICATIONS DE S√âCURIT√â
	# ==========================
	# Ne pas ex√©cuter le fallback si :
	# 1. Il a d√©j√† √©t√© ex√©cut√©
	# 2. WebSocket est connect√©
	# 3. Une map est d√©j√† charg√©e
	
	if fallback_executed:
		print("[Main] Fallback d√©j√† ex√©cut√©, abandon")
		return
	
	if websocket_manager.is_user_connected():
		print("[Main] WebSocket connect√©, fallback non n√©cessaire")
		return
	
	if GameManager.current_map_id != "":
		print("[Main] Map d√©j√† charg√©e: ", GameManager.current_map_id, ", fallback non n√©cessaire")
		return
	
	# EX√âCUTION DU FALLBACK
	# ======================
	print("[Main] === EX√âCUTION DU FALLBACK (MODE HORS LIGNE) ===")
	fallback_executed = true
	
	# Lire les donn√©es du token JWT
	var payload = AuthManager.get_jwt_payload()
	var map_id = payload.get("map_id", "map_0_0")
	var pos_x = payload.get("pos_x", 758.0)
	var pos_y = payload.get("pos_y", 605.0)
	
	print("[Main] Chargement hors ligne - Map: ", map_id, " Position: (", pos_x, ", ", pos_y, ")")
	
	# Configurer la cam√©ra
	_setup_adaptive_camera()
	
	# Charger la map via le GameManager
	GameManager.load_map(map_id, pos_x, pos_y)
	
	# Initialiser le HUD en mode hors ligne
	if hud:
		hud.visible = true
		print("[Main] HUD activ√© en mode hors ligne")
	else:
		print("[Main] ‚ùå HUD non trouv√© en mode hors ligne !")
	
	print("[Main] Mode hors ligne activ√© avec succ√®s")



## CONFIGURATION DE LA CAM√âRA ADAPTATIVE
## =======================================
func _setup_adaptive_camera():
	"""
	Configure la cam√©ra pour s'adapter automatiquement √† toutes les r√©solutions d'√©cran.
	Calcule le zoom optimal pour afficher toute la map tout en gardant les proportions.
	"""
	print("[Main] === CONFIGURATION CAM√âRA ADAPTATIVE ===")
	
	# CALCUL DES DIMENSIONS
	# =====================
	# Taille de la fen√™tre actuelle
	var screen_size = get_viewport().get_visible_rect().size
	print("[Main] Taille √©cran: ", screen_size)
	
	# Taille de la map (bas√©e sur le sprite map_0_0.png avec son scale)
	var map_base_size = Vector2(1536, 1024)  # Taille originale de la texture
	var map_scale = Vector2(1.25, 1.05176)   # Scale appliqu√© dans la sc√®ne
	var map_size = map_base_size * map_scale
	print("[Main] Taille map: ", map_size)
	
	# CALCUL DU ZOOM OPTIMAL
	# =======================
	# Calculer le zoom n√©cessaire pour afficher toute la map
	var zoom_x = screen_size.x / map_size.x
	var zoom_y = screen_size.y / map_size.y
	var zoom_factor = min(zoom_x, zoom_y)  # Garder les proportions
	
	print("[Main] Zoom calcul√©: ", zoom_factor)
	
	# APPLICATION DES PARAM√àTRES CAM√âRA
	# ==================================
	# Appliquer le zoom √† la cam√©ra
	camera.zoom = Vector2(zoom_factor, zoom_factor)
	
	# Centrer la cam√©ra sur le centre de la map
	var map_center = map_size / 2
	camera.position = map_center
	camera.enabled = true
	
	print("[Main] Cam√©ra configur√©e - Centre: ", map_center, " Zoom: ", zoom_factor)

## CALLBACK: REDIMENSIONNEMENT DE FEN√äTRE
## =======================================
func _on_viewport_size_changed():
	"""
	Appel√© automatiquement quand la taille de la fen√™tre change.
	Reconfigure la cam√©ra pour s'adapter √† la nouvelle taille.
	"""
	print("[Main] === REDIMENSIONNEMENT FEN√äTRE ===")
	if camera != null:
		_setup_adaptive_camera()
		print("[Main] Cam√©ra ajust√©e √† la nouvelle taille de fen√™tre")
