extends GutTest

# Tests simples sans dépendances pour vérifier que le système fonctionne

func test_basic_assertions():
	# Test des assertions de base
	assert_eq(1 + 1, 2, "Addition should work")
	assert_ne(1, 2, "1 should not equal 2")
	assert_true(true, "True should be true")
	assert_false(false, "False should be false")

func test_string_operations():
	# Test des opérations sur les strings
	var test_string = "Flumen MMORPG"
	
	assert_has(test_string, "Flumen", "String should contain 'Flumen'")
	assert_has(test_string, "MMORPG", "String should contain 'MMORPG'")
	assert_does_not_have(test_string, "WoW", "String should not contain 'WoW'")

func test_array_operations():
	# Test des opérations sur les arrays
	var test_array = [1, 2, 3, "test", Vector2(0, 0)]
	
	assert_has(test_array, 1, "Array should contain 1")
	assert_has(test_array, "test", "Array should contain 'test'")
	assert_does_not_have(test_array, 999, "Array should not contain 999")
	assert_eq(test_array.size(), 5, "Array should have 5 elements")

func test_vector_operations():
	# Test des opérations sur les Vector2
	var vec1 = Vector2(10, 20)
	var vec2 = Vector2(10, 20)
	var vec3 = Vector2(5, 10)
	
	assert_eq(vec1, vec2, "Identical vectors should be equal")
	assert_ne(vec1, vec3, "Different vectors should not be equal")
	assert_eq(vec1.x, 10, "Vector X should be 10")
	assert_eq(vec1.y, 20, "Vector Y should be 20")

func test_coordinate_math():
	# Test de mathématiques de coordonnées (comme dans notre système de cartes)
	var origin = Vector2i(0, 0)
	var right = Vector2i(1, 0)
	var left = Vector2i(-1, 0)
	var up = Vector2i(0, 1)
	var down = Vector2i(0, -1)
	
	# Vérifier les coordonnées adjacentes
	assert_eq(origin + Vector2i(1, 0), right, "Moving right should work")
	assert_eq(origin + Vector2i(-1, 0), left, "Moving left should work")
	assert_eq(origin + Vector2i(0, 1), up, "Moving up should work")
	assert_eq(origin + Vector2i(0, -1), down, "Moving down should work")
