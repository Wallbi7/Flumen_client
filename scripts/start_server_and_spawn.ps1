# Script pour d√©marrer le serveur et forcer le spawn de monstres
# Ce script d√©marre le serveur Go s'il n'est pas d√©j√† en cours

Write-Host "üåä Flumen - Start Server & Spawn Monsters" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan

# Configuration
$SERVER_URL = "http://127.0.0.1:9090"
$MAP_ID = "map_1_0"
$SERVER_DIR = "..\..\Flumen_server"

Write-Host "üéØ Cible: Map $MAP_ID" -ForegroundColor Yellow
Write-Host "üåê Serveur: $SERVER_URL" -ForegroundColor Yellow
Write-Host "üìÅ Dossier serveur: $SERVER_DIR" -ForegroundColor Yellow
Write-Host ""

# 1. V√©rifier si le serveur est d√©j√† en cours
Write-Host "üîç V√©rification du serveur..." -ForegroundColor Green
try {
    $response = Invoke-RestMethod -Uri "$SERVER_URL/api/v1/monsters/stats" -Method GET -TimeoutSec 3
    Write-Host "‚úÖ Serveur d√©j√† en cours sur le port 9090" -ForegroundColor Green
    $serverRunning = $true
} catch {
    Write-Host "‚ö†Ô∏è Serveur non accessible, d√©marrage en cours..." -ForegroundColor Yellow
    $serverRunning = $false
}

# 2. D√©marrer le serveur si n√©cessaire
if (-not $serverRunning) {
    Write-Host "üöÄ D√©marrage du serveur..." -ForegroundColor Green
    
    # V√©rifier si le dossier serveur existe
    if (-not (Test-Path $SERVER_DIR)) {
        Write-Host "‚ùå Dossier serveur non trouv√©: $SERVER_DIR" -ForegroundColor Red
        Write-Host "üí° Assurez-vous que le dossier Flumen_server existe" -ForegroundColor Yellow
        exit 1
    }
    
    # Aller dans le dossier serveur
    Push-Location $SERVER_DIR
    
    try {
        # D√©marrer le serveur en arri√®re-plan
        Write-Host "üì¶ Compilation et d√©marrage du serveur..." -ForegroundColor Green
        Start-Process -FilePath "go" -ArgumentList "run", "cmd/api/main.go" -WindowStyle Hidden
        
        # Attendre que le serveur d√©marre
        Write-Host "‚è≥ Attente du d√©marrage du serveur..." -ForegroundColor Yellow
        $maxAttempts = 30
        $attempt = 0
        
        while ($attempt -lt $maxAttempts) {
            try {
                $response = Invoke-RestMethod -Uri "$SERVER_URL/api/v1/monsters/stats" -Method GET -TimeoutSec 2
                Write-Host "‚úÖ Serveur d√©marr√© avec succ√®s!" -ForegroundColor Green
                break
            } catch {
                $attempt++
                Write-Host "‚è≥ Tentative $attempt/$maxAttempts..." -ForegroundColor Gray
                Start-Sleep -Seconds 2
            }
        }
        
        if ($attempt -ge $maxAttempts) {
            Write-Host "‚ùå Le serveur n'a pas d√©marr√© dans le d√©lai imparti" -ForegroundColor Red
            exit 1
        }
        
    } catch {
        Write-Host "‚ùå Erreur lors du d√©marrage du serveur: $($_.Exception.Message)" -ForegroundColor Red
        exit 1
    } finally {
        Pop-Location
    }
}

# 3. Attendre un peu pour que le syst√®me de spawn automatique s'initialise
Write-Host ""
Write-Host "‚è≥ Attente de l'initialisation du syst√®me de spawn..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# 4. V√©rifier les monstres actuels
Write-Host ""
Write-Host "üîç V√©rification des monstres actuels sur $MAP_ID..." -ForegroundColor Green
try {
    $response = Invoke-RestMethod -Uri "$SERVER_URL/api/v1/monsters/map/$MAP_ID" -Method GET -TimeoutSec 5
    Write-Host "üìä Monstres trouv√©s: $($response.count)" -ForegroundColor Gray
    
    if ($response.count -gt 0) {
        Write-Host "üéÆ Monstres pr√©sents:" -ForegroundColor Cyan
        foreach ($monster in $response.monsters) {
            Write-Host "  - $($monster.template_id) (Niveau $($monster.level)) √† ($($monster.pos_x), $($monster.pos_y))" -ForegroundColor Gray
        }
        Write-Host ""
        Write-Host "üéâ Parfait! Des monstres sont d√©j√† pr√©sents sur la map $MAP_ID" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Aucun monstre sur cette map, for√ßage du spawn..." -ForegroundColor Yellow
        
        # 5. Forcer le spawn de monstres
        Write-Host "‚ö° For√ßage du spawn de monstres..." -ForegroundColor Green
        try {
            $response = Invoke-RestMethod -Uri "$SERVER_URL/api/v1/monsters/spawn/$MAP_ID" -Method POST -TimeoutSec 5
            Write-Host "‚úÖ Spawn forc√© avec succ√®s" -ForegroundColor Green
            Write-Host "üìù Message: $($response.message)" -ForegroundColor Gray
            
            # 6. V√©rifier √† nouveau les monstres
            Write-Host ""
            Write-Host "üîç V√©rification apr√®s spawn..." -ForegroundColor Green
            Start-Sleep -Seconds 2
            
            $response = Invoke-RestMethod -Uri "$SERVER_URL/api/v1/monsters/map/$MAP_ID" -Method GET -TimeoutSec 5
            Write-Host "üìä Monstres trouv√©s: $($response.count)" -ForegroundColor Gray
            
            if ($response.count -gt 0) {
                Write-Host "üéÆ Monstres pr√©sents:" -ForegroundColor Cyan
                foreach ($monster in $response.monsters) {
                    Write-Host "  - $($monster.template_id) (Niveau $($monster.level)) √† ($($monster.pos_x), $($monster.pos_y))" -ForegroundColor Gray
                }
                Write-Host ""
                Write-Host "üéâ Succ√®s! Des monstres sont maintenant pr√©sents sur la map $MAP_ID" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è Aucun monstre n'a √©t√© spawn√©" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "‚ùå Erreur lors du spawn forc√©: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "üí° Vous pouvez maintenant tester le combat dans le client Godot" -ForegroundColor Yellow
Write-Host "üèÅ Script termin√©" -ForegroundColor Cyan 